import sys
import asyncio

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è Windows
if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import aiosqlite
import re
import logging
import time
from datetime import datetime, timedelta
from pyrogram import Client, filters, enums, idle
from pyrogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    CallbackQuery,
    ChatPermissions,
    ChatMemberUpdated,
)
from pyrogram.errors import PeerIdInvalid, UserNotParticipant
from pyrogram.types import User
import random

logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
button_usage_times = {}

async def is_button_click_allowed(user_id):
    current_time = time.time()
    last_time = button_usage_times.get(user_id, 0)
    if current_time - last_time >= 0.5:
        button_usage_times[user_id] = current_time
        return True
    else:
        return False

async def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
    API_ID = '24142370'  
    API_HASH = '5499eef960820d34a871c67024d89819' 
    BOT_TOKEN = '7606576920:AAH1NHux5muyr-kdt0aaMMmZ0sxuAwp06Ec' 
    OWNER_ID = 6927426919  



    db = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    app = Client("my_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

    # –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    IMAGE_URLS = {
        "–í–ª–∞–¥–µ–ª–µ—Ü": "https://ibb.co/6DgKqwq",
        "–ê–¥–º–∏–Ω": "https://i.ibb.co/0c7PSpQ",
        "–°—Ç–∞–∂–µ—Ä": "https://i.ibb.co/s9zjWWW",
        "–ì–∞—Ä–∞–Ω—Ç": "https://i.ibb.co/4FTCJ10",
        "–ü—Ä–æ–≤–µ—Ä–µ–Ω –ì–∞—Ä–∞–Ω—Ç–æ–º": "https://i.ibb.co/s3kRSnf",
        "–°–∫–∞–º–µ—Ä": "https://i.ibb.co/qFKYTg7",
        "–ù–µ—Ç –≤ –±–∞–∑–µ": "https://ibb.co/j3xxGdr"
    }

    def is_owner(user_id):
        return user_id == OWNER_ID

    async def is_admin(user_id):
        if is_owner(user_id):
            return True
        if db is None:
            logging.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return False
        async with db.execute('SELECT 1 FROM admins WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone() is not None

    async def is_trainee(user_id):
        if db is None:
            logging.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return False
        async with db.execute('SELECT 1 FROM trainees WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone() is not None

    async def is_guarantor(user_id):
        if db is None:
            logging.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return False
        async with db.execute('SELECT 1 FROM guarantors WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone() is not None

    async def is_premium(user_id):
        if db is None:
            logging.error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            return False
        async with db.execute('SELECT 1 FROM premium_users WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone() is not None

    async def init_db():
        nonlocal db
        try:
            db = await aiosqlite.connect('bot_data.db')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS admins (
                    user_id INTEGER PRIMARY KEY
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS scammers (
                    user_id INTEGER PRIMARY KEY,
                    proof_link TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS guarantors (
                    user_id INTEGER PRIMARY KEY
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS premium_users (
                    user_id INTEGER PRIMARY KEY,
                    channel_link TEXT,
                    photo_link TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS search_logs (
                    searcher_id INTEGER,
                    target_id INTEGER,
                    PRIMARY KEY (searcher_id, target_id)
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS user_stats (
                    user_id INTEGER PRIMARY KEY,
                    scammers_reported INTEGER DEFAULT 0,
                    balance INTEGER DEFAULT 0
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS trusted_users (
                    user_id INTEGER PRIMARY KEY,
                    guarantor_id INTEGER
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS trainees (
                    user_id INTEGER PRIMARY KEY,
                    admin_id INTEGER
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS pending_scam_requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    trainee_id INTEGER,
                    target TEXT,
                    proof_link TEXT
                )
            ''')
            await db.execute('''
                CREATE TABLE IF NOT EXISTS bot_groups (
                    chat_id INTEGER PRIMARY KEY
                )
            ''')
            await db.commit()
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            sys.exit(1)

    async def get_user_info(client, target):
        user_id = None
        user = None
        if target.isdigit():
            user_id = int(target)
            try:
                user = await client.get_users(user_id)
            except PeerIdInvalid:
                user = None
        else:
            if target.startswith('@'):
                target = target[1:]
            user = await client.get_users(target)
            user_id = user.id

        return user, user_id

    async def can_restrict_members(chat):
        member = await app.get_chat_member(chat.id, 'me')
        if member.status == enums.ChatMemberStatus.OWNER:
            return True
        elif member.status == enums.ChatMemberStatus.ADMINISTRATOR:
            return member.privileges.can_restrict_members
        else:
            return False

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π

    @app.on_message(filters.command("start"))
    async def start_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        keyboard = ReplyKeyboardMarkup(
            [
                ["‚ùì–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å", "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
                ["üíì–ù–∞—à–∏ –ì–∞—Ä–∞–Ω—Ç—ã", "üëÄ–ü—Ä–µ–º–∏—É–º"],
                ["ü§¨–°–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞", "üôå–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"],
                ["üéÅ–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–µ–π—Å—ã"]  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            ],
            resize_keyboard=True
        )
        await message.reply(
            "–ú—ã - —Ç—É–∞–ª–µ—Ç—ã, –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ê–Ω—Ç–∏–°–∫–∞–º –ë–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è:\n\n"
            "ü§ì **–ü—Ä–æ–≤–µ—Ä–∏–º —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Å–∫–∞–º**\n"
            "ü§† **–ù–∞–π–¥—ë–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –≥–∞—Ä–∞–Ω—Ç–∞**\n"
            "ü§ï **–ü–æ–º–æ–∂–µ–º —Å–ª–∏—Ç—å —Å–∫–∞–º–º–µ—Ä–∞**\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º",
            parse_mode=enums.ParseMode.MARKDOWN,
            reply_markup=keyboard
        )

    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

    @app.on_message(filters.regex(r'^—á–µ–∫(?:\s*(.*))?$', flags=re.IGNORECASE))
    async def check_user(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        args_match = re.match(r'^—á–µ–∫(?:\s*(.*))?$', message.text.strip(), flags=re.IGNORECASE)
        args = args_match.group(1) if args_match else None

        if args is None or args.lower() in ['–º–∏', '—è']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            user = message.from_user
        elif message.reply_to_message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏
            user = message.reply_to_message.from_user
            user_id = user.id
        else:
            target = args.strip()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
            searching_msg = await message.reply("üîé –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...")

            try:
                user, user_id = await get_user_info(client, target)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if user and not isinstance(user, User):
                    await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                    return

                # –ï—Å–ª–∏ user_id –≤—Å–µ –µ—â–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–π–¥–∏
                if user_id is None:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    return

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —á–µ–∫: {e}")
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
                return

            finally:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
                await searching_msg.delete()

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∏–º–µ—é—â–∏–º–∏—Å—è user –∏ user_id
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user:
            nickname = ' '.join(filter(None, [user.first_name, user.last_name]))
            nickname = nickname.replace('_', '\\_')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        else:
            nickname = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if message.from_user.id != user_id:
            async with db.execute('SELECT 1 FROM search_logs WHERE searcher_id = ? AND target_id = ?', (message.from_user.id, user_id)) as cursor:
                exists = await cursor.fetchone()
            if not exists:
                await db.execute('INSERT INTO search_logs (searcher_id, target_id) VALUES (?, ?)', (message.from_user.id, user_id))
                await db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        async with db.execute('SELECT COUNT(DISTINCT searcher_id) FROM search_logs WHERE target_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            search_count = result[0]
        else:
            search_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—Ç—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤
        async with db.execute('SELECT scammers_reported FROM user_stats WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            scammers_reported = result[0]
        else:
            scammers_reported = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_owner_user = user_id == OWNER_ID
        is_admin_user = await is_admin(user_id)
        is_trainee_user = await is_trainee(user_id)

        additional_info = ""
        reputation_type = "–ù–µ—Ç –≤ –±–∞–∑–µ"
        reputation = reputation_type
        image_url = IMAGE_URLS.get(reputation_type)

        if is_owner_user:
            reputation_type = "–í–ª–∞–¥–µ–ª–µ—Ü"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
        elif is_admin_user:
            reputation_type = "–ê–¥–º–∏–Ω"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
        elif is_trainee_user:
            # –ü–æ–ª—É—á–∞–µ–º admin_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trainees
            async with db.execute('SELECT admin_id FROM trainees WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
            if result:
                admin_id = result[0]
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_user = await client.get_users(admin_id)
                admin_name = ' '.join(filter(None, [admin_user.first_name, admin_user.last_name]))
                reputation_type = "–°—Ç–∞–∂–µ—Ä"
                reputation = f"{reputation_type} {admin_name}"
            else:
                reputation_type = "–°—Ç–∞–∂–µ—Ä"
                reputation = f"{reputation_type} –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            image_url = IMAGE_URLS.get(reputation_type)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≥–∞—Ä–∞–Ω—Ç—ã, —Å–∫–∞–º–µ—Ä—ã, –ø—Ä–µ–º–∏—É–º –∏ —Ç.–¥.)
        async with db.execute('SELECT channel_link, photo_link FROM premium_users WHERE user_id = ?', (user_id,)) as cursor:
            premium_data = await cursor.fetchone()

        async with db.execute('SELECT guarantor_id FROM trusted_users WHERE user_id = ?', (user_id,)) as cursor:
            trusted_data = await cursor.fetchone()

        async with db.execute('SELECT 1 FROM guarantors WHERE user_id = ?', (user_id,)) as cursor:
            guarantor_data = await cursor.fetchone()

        async with db.execute('SELECT proof_link FROM scammers WHERE user_id = ?', (user_id,)) as cursor:
            scammer_data = await cursor.fetchone()

        if guarantor_data:
            reputation_type = "–ì–∞—Ä–∞–Ω—Ç"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
        elif trusted_data:
            guarantor_id = trusted_data[0]
            guarantor = await client.get_users(guarantor_id)
            guarantor_nickname = ' '.join(filter(None, [guarantor.first_name, guarantor.last_name]))
            reputation_type = "–ü—Ä–æ–≤–µ—Ä–µ–Ω –ì–∞—Ä–∞–Ω—Ç–æ–º"
            reputation = f"{reputation_type} {guarantor_nickname}"
            image_url = IMAGE_URLS.get(reputation_type)
        elif scammer_data:
            proof_link = scammer_data[0]
            reputation_type = "–°–∫–∞–º–µ—Ä"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
            additional_info += f"""
üìí **–ü—Ä—É—Ñ—ã:** [–°—Å—ã–ª–∫–∞]({proof_link})
"""

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if premium_data:
            channel_link, photo_link = premium_data
            if channel_link:
                additional_info += f"""
üé≠ **–ö–∞–Ω–∞–ª:** {channel_link}
"""
            if photo_link:
                image_url = photo_link  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ü–†–û–§–ò–õ–¨
        if user:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–†–û–§–ò–õ–¨", url=f"tg://user?id={user_id}")]
            ])
        else:
            keyboard = None  # –ù–µ –º–æ–∂–µ–º –¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        await client.send_photo(
            chat_id=message.chat.id,
            photo=image_url,
            caption=f"""üïµÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:** {nickname}

üÜî –ê–π–¥–∏ : `{user_id}`

üîÅ **–†–µ–ø—É—Ç–∞—Ü–∏—è:** {reputation}

üöÆ **–°–ª–∏—Ç–æ —Å–∫–∞–º–µ—Ä–æ–≤:** {scammers_reported}

üîé **–ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ:** {search_count} —Ä–∞–∑
{additional_info}
""",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )

    @app.on_message(filters.text & filters.regex(r'^‚ùì–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å$'))
    async def my_profile(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        user = message.from_user

        nickname = ' '.join(filter(None, [user.first_name, user.last_name]))
        nickname = nickname.replace('_', '\\_')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        user_id = user.id

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        async with db.execute('SELECT COUNT(DISTINCT searcher_id) FROM search_logs WHERE target_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            search_count = result[0]
        else:
            search_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—Ç—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤
        async with db.execute('SELECT scammers_reported FROM user_stats WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            scammers_reported = result[0]
        else:
            scammers_reported = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_owner_user = user_id == OWNER_ID
        is_admin_user = await is_admin(user_id)
        is_trainee_user = await is_trainee(user_id)

        additional_info = ""
        reputation_type = "–ù–µ—Ç –≤ –±–∞–∑–µ"
        reputation = reputation_type
        image_url = IMAGE_URLS.get(reputation_type)

        if is_owner_user:
            reputation_type = "–í–ª–∞–¥–µ–ª–µ—Ü"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
        elif is_admin_user:
            reputation_type = "–ê–¥–º–∏–Ω"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
        elif is_trainee_user:
            # –ü–æ–ª—É—á–∞–µ–º admin_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trainees
            async with db.execute('SELECT admin_id FROM trainees WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
            if result:
                admin_id = result[0]
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_user = await client.get_users(admin_id)
                admin_name = ' '.join(filter(None, [admin_user.first_name, admin_user.last_name]))
                reputation_type = "–°—Ç–∞–∂–µ—Ä"
                reputation = f"{reputation_type} {admin_name}"
            else:
                reputation_type = "–°—Ç–∞–∂–µ—Ä"
                reputation = f"{reputation_type} –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            image_url = IMAGE_URLS.get(reputation_type)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≥–∞—Ä–∞–Ω—Ç—ã, —Å–∫–∞–º–µ—Ä—ã, –ø—Ä–µ–º–∏—É–º –∏ —Ç.–¥.)
        async with db.execute('SELECT channel_link, photo_link FROM premium_users WHERE user_id = ?', (user_id,)) as cursor:
            premium_data = await cursor.fetchone()

        async with db.execute('SELECT guarantor_id FROM trusted_users WHERE user_id = ?', (user_id,)) as cursor:
            trusted_data = await cursor.fetchone()

        async with db.execute('SELECT 1 FROM guarantors WHERE user_id = ?', (user_id,)) as cursor:
            guarantor_data = await cursor.fetchone()

        async with db.execute('SELECT proof_link FROM scammers WHERE user_id = ?', (user_id,)) as cursor:
            scammer_data = await cursor.fetchone()

        if guarantor_data:
            reputation_type = "–ì–∞—Ä–∞–Ω—Ç"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
        elif trusted_data:
            guarantor_id = trusted_data[0]
            guarantor = await client.get_users(guarantor_id)
            guarantor_nickname = ' '.join(filter(None, [guarantor.first_name, guarantor.last_name]))
            reputation_type = "–ü—Ä–æ–≤–µ—Ä–µ–Ω –ì–∞—Ä–∞–Ω—Ç–æ–º"
            reputation = f"{reputation_type} {guarantor_nickname}"
            image_url = IMAGE_URLS.get(reputation_type)
        elif scammer_data:
            proof_link = scammer_data[0]
            reputation_type = "–°–∫–∞–º–µ—Ä"
            reputation = reputation_type
            image_url = IMAGE_URLS.get(reputation_type)
            additional_info += f"""
üìí **–ü—Ä—É—Ñ—ã:** [–°—Å—ã–ª–∫–∞]({proof_link})
"""

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if premium_data:
            channel_link, photo_link = premium_data
            if channel_link:
                additional_info += f"""
üé≠ **–ö–∞–Ω–∞–ª:** {channel_link}
"""
            if photo_link:
                image_url = photo_link  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ü–†–û–§–ò–õ–¨
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–†–û–§–ò–õ–¨", url=f"tg://user?id={user_id}")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await client.send_photo(
            chat_id=message.chat.id,
            photo=image_url,
            caption=f"""üïµÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:** {nickname}

üÜî –ê–π–¥–∏: `{user_id}`

üîÅ **–†–µ–ø—É—Ç–∞—Ü–∏—è:** {reputation}

üöÆ **–°–ª–∏—Ç–æ —Å–∫–∞–º–µ—Ä–æ–≤:** {scammers_reported}

üîé **–ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ:** {search_count} —Ä–∞–∑
{additional_info}
""",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
    

    @app.on_message(filters.text & filters.regex(r'^üéÅ–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–µ–π—Å—ã$'))
    async def new_year_cases_handler(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–µ–π—Å—ã")

        text = (
            "üéÅ **–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–µ–π—Å—ã** üéÅ\n\n"
            "–ú—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–µ–π—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∑–∞ –Ω–∏—Ö –∫–µ–π—Å—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å:\n\n"
            "‚Ä¢ üéâ **–ü—Ä–µ–º–∏—É–º** - 8%\n"
            "‚Ä¢ üõ°Ô∏è **–¢—Ä–∞—Å—Ç** - 4% (–æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞ AquaSeledka)\n"
            "‚Ä¢ ‚ùå **–ù–∏—á–µ–≥–æ** - 75%\n"
            "‚Ä¢ üïµÔ∏è‚Äç‚ôÇÔ∏è **–†—É—á–µ–Ω–∏–µ –æ—Ç @Aqua_Seledka (–Ω–∞ 500‚ÇΩ)** - —à–∞–Ω—Å 1%\n"
            "‚Ä¢ üïµÔ∏è‚Äç‚ôÇÔ∏è **–†—É—á–µ–Ω–∏–µ –æ—Ç @Aqua_Seledka (–Ω–∞ 1000‚ÇΩ)** - —à–∞–Ω—Å 0.09%\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Ö –∫—É–ø–∏—Ç—å –∑–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–ª–∞–¥–æ—Å—Ç–∏, –∞ –∏—Ö –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Å–ª–∏–≤ —Å–∫–∞–º–µ—Ä–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ `/balance`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –≤ –±–∞–ª–∞–Ω—Å–µ."
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üéó–ö—É–ø–∏—Ç—å –∑–∞ —Å–ª–∞–¥–æ—Å—Ç–∏", callback_data="buy_candy_case")]
        ])

        await message.reply(
            text,
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üéó–ö—É–ø–∏—Ç—å –∑–∞ —Å–ª–∞–¥–æ—Å—Ç–∏"
    @app.on_callback_query(filters.regex(r'^buy_candy_case$'))
    async def buy_candy_case_callback(client, callback_query: CallbackQuery):
        user_id = callback_query.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute('SELECT balance FROM user_stats WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        balance = result[0] if result else 0

        if balance < 25:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–∞–¥–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞. –í–∞–º –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 25 —Å–ª–∞–¥–æ—Å—Ç–µ–π.", show_alert=True)
            return

        # –í—ã—á–∏—Ç–∞–µ–º 25 —Å–ª–∞–¥–æ—Å—Ç–µ–π
        await db.execute('UPDATE user_stats SET balance = balance - 25 WHERE user_id = ?', (user_id,))
        await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
        opening_msg = await callback_query.message.reply("üîÑ **–ò–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...**\nüü©üü©üü©üü©üü©üü©üü©üü© 0%")
        await callback_query.answer()

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
        for progress in range(10, 110, 10):
            await asyncio.sleep(1)  # –ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 10%
            progress_bar = "üü©" * (progress // 10) + "üü¶" * (10 - progress // 10)
            await opening_msg.edit(f"üîÑ **–ò–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...**\n{progress_bar} {progress}%")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—è
        outcome = random.choices(
            population=[
                "–ü—Ä–µ–º–∏—É–º",
                "–¢—Ä–∞—Å—Ç",
                "–ù–∏—á–µ–≥–æ",
                "–†—É—á–µ–Ω–∏–µ_500",
                "–†—É—á–µ–Ω–∏–µ_1000"
            ],
            weights=[8, 4, 75, 1, 0.09],
            k=1
        )[0]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if outcome == "–ü—Ä–µ–º–∏—É–º":
            await db.execute('INSERT OR IGNORE INTO premium_users (user_id) VALUES (?)', (user_id,))
            await db.commit()
            result_text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª **–ü—Ä–µ–º–∏—É–º** —Å—Ç–∞—Ç—É—Å! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
        elif outcome == "–¢—Ä–∞—Å—Ç":
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Å—Ç–∞
            # –ó–∞–º–µ–Ω–∏—Ç–µ 'AquaSeledka_user_id' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π user_id
            AQUASELEDKA_USER_ID = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
            await db.execute('INSERT OR IGNORE INTO trusted_users (user_id, guarantor_id) VALUES (?, ?)', (user_id, AQUASELEDKA_USER_ID))
            await db.commit()
            result_text = "üõ°Ô∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª **–¢—Ä–∞—Å—Ç** —Å—Ç–∞—Ç—É—Å –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞ AquaSeledka."
        elif outcome == "–ù–∏—á–µ–≥–æ":
            result_text = "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
        elif outcome == "–†—É—á–µ–Ω–∏–µ_500":
            result_text = "üïµÔ∏è‚Äç‚ôÇÔ∏è **–†—É—á–µ–Ω–∏–µ –æ—Ç @Aqua_Seledka –Ω–∞ 500‚ÇΩ**. AquaSeledka —Ä—É—á–∞–µ—Ç—Å—è –∑–∞ –≤–∞—Å!"
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        elif outcome == "–†—É—á–µ–Ω–∏–µ_1000":
            result_text = "üïµÔ∏è‚Äç‚ôÇÔ∏è **–†—É—á–µ–Ω–∏–µ –æ—Ç @Aqua_Seledka –Ω–∞ 1000‚ÇΩ**. AquaSeledka —Ä—É—á–∞–µ—Ç—Å—è –∑–∞ –≤–∞—Å!"
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        await opening_msg.edit(f"‚úÖ **–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!**\n\n{result_text}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
    @app.on_message(filters.command("balance"))
    async def balance_command(client, message: Message):
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db.execute('SELECT balance FROM user_stats WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        balance = result[0] if result else 0

        await message.reply(f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {balance} üç¨")

    @app.on_message(filters.command('addcon'))
    async def add_con_command(client, message: Message):
        if message.from_user.id != OWNER_ID:
            return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏ user_id –∏–ª–∏ username
        try:
            parts = message.text.split()
            coins = int(parts[1])
            target = parts[2]
        except (IndexError, ValueError):
            return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addcon <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç> <user_id –∏–ª–∏ @username>")

        user, user_id = await get_user_info(client, target)
        if user is None:
            return await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –í—ã–¥–∞–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await db.execute('INSERT OR IGNORE INTO user_stats (user_id) VALUES (?)', (user_id,))
        await db.execute('UPDATE user_stats SET balance = balance + ? WHERE user_id = ?', (coins, user_id))
        await db.commit()

        await client.send_message(user_id, f"–¢–µ–±–µ –≤—ã–¥–∞–Ω—ã {coins} –º–æ–Ω–µ—Ç! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {coins} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        await message.reply(f"–í—ã–¥–∞–ª–∏ {coins} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username if user.username else user.first_name}.")

    @app.on_message(filters.text & filters.regex(r'^üôå–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã$'))
    async def faq_handler(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")

        text = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –ß–∞—Å—Ç—ã–µ –í–æ–ø—Ä–æ—Å—ã"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö—Ç–æ —Ç–∞–∫–æ–π –≥–∞—Ä–∞–Ω—Ç", url="https://telegra.ph/Kto-takoj-Garant-09-20")],
            [InlineKeyboardButton("–ö–∞–∫ –Ω–∞–π—Ç–∏ –≥–∞—Ä–∞–Ω—Ç–∞", url="https://telegra.ph/kak-najti-garanta-11-23")],
            [InlineKeyboardButton("–ö–∞–∫ —Å—Ç–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º", url="https://telegra.ph/kak-stat-garantom-11-23")],
            [InlineKeyboardButton("–ú–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å —Å–Ω—è—Ç–∏–µ —Å –±–∞–∑—ã", url="https://telegra.ph/snyatie-za-dengi-11-23")]
        ])

        await message.reply(text, reply_markup=keyboard)

    @app.on_message(filters.regex(r'^\+—Å–ø–∞—Å–∏–±–æ') & filters.reply)
    async def thank_you_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ +—Å–ø–∞—Å–∏–±–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ª–∏—Ç—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤ –∏ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute('''
            INSERT INTO user_stats (user_id, scammers_reported, balance)
            VALUES (?, 1, 1)
            ON CONFLICT(user_id)
            DO UPDATE SET scammers_reported = scammers_reported + 1,
                          balance = balance + 1
        ''', (target_user_id,))
        await db.commit()

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.mention} –¥–æ–±–∞–≤–ª–µ–Ω–æ 1 –∫ —Å—á–µ—Ç—á–∏–∫—É —Å–ª–∏—Ç—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤ –∏ 1 üç¨ –≤ –±–∞–ª–∞–Ω—Å.")

    @app.on_message(filters.command("unadmin"))
    async def unadmin_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /unadmin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unadmin <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º>")
            return

        target = args[1]

        try:
            user, user_id = await get_user_info(client, target)

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await db.execute('DELETE FROM admins WHERE user_id = ?', (user_id,))
            await db.commit()

            await message.reply(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /unadmin: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    # –ö–æ–º–∞–Ω–¥–∞ /untrust
    @app.on_message(filters.command("untrust"))
    async def untrust_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /untrust –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ trusted_users
        await db.execute('DELETE FROM trusted_users WHERE user_id = ?', (target_user_id,))
        await db.commit()

        await message.reply(f"–°—Ç–∞—Ç—É—Å '–ü—Ä–æ–≤–µ—Ä–µ–Ω –≥–∞—Ä–∞–Ω—Ç–æ–º' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–¥–∞–ª–µ–Ω.")

    # –ö–æ–º–∞–Ω–¥–∞ /ungarant
    @app.on_message(filters.command("ungarant"))
    async def unguarantor_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /ungarant –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ungarant <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º>")
            return

        target = args[1]

        try:
            user, user_id = await get_user_info(client, target)

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–∞—Ä–∞–Ω—Ç–æ–≤
            await db.execute('DELETE FROM guarantors WHERE user_id = ?', (user_id,))
            await db.commit()

            await message.reply(f"–°—Ç–∞—Ç—É—Å –≥–∞—Ä–∞–Ω—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ungarant: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞: {e}")

    # –ö–æ–º–∞–Ω–¥–∞ /unscam
    @app.on_message(filters.command("unscam"))
    async def unscam_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /unscam –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unscam <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º>")
            return

        target = args[1]

        try:
            user, user_id = await get_user_info(client, target)

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∫–∞–º–µ—Ä–æ–≤
            await db.execute('DELETE FROM scammers WHERE user_id = ?', (user_id,))
            await db.commit()

            await message.reply(f"–°—Ç–∞—Ç—É—Å —Å–∫–∞–º–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /unscam: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞: {e}")

    # –ö–æ–º–∞–Ω–¥–∞ /–∞–Ω—Å—Ç–∞–∂–µ—Ä
    @app.on_message(filters.command("–∞–Ω—Å—Ç–∞–∂–µ—Ä"))
    async def untrainee_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /–∞–Ω—Å—Ç–∞–∂–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç–∞–∂–µ—Ä–æ–≤
        await db.execute('DELETE FROM trainees WHERE user_id = ?', (target_user_id,))
        await db.commit()

        await message.reply(f"–°—Ç–∞—Ç—É—Å —Å—Ç–∞–∂–µ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–¥–∞–ª–µ–Ω.")

    @app.on_message(filters.text & filters.regex(r'^üëÄ–ü—Ä–µ–º–∏—É–º$'))
    async def premium_info(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º–µ")

        text = """–û—Ç–∫—Ä–æ–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

‚Ä¢ –ú–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ (/setphoto)
‚Ä¢ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ (/setchannel)
‚Ä¢ 100 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å

–í—Å–µ —ç—Ç–∏ —Ñ–∏—à–∫–∏ –≤—Ö–æ–¥—è—Ç –≤ ELITE Premium."""

        photo_url = 'https://ibb.co/mXySPM2'  # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö–∞–∫ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium")]
        ])

        await client.send_photo(
            chat_id=message.chat.id,
            photo=photo_url,
            caption=text,
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )

    @app.on_callback_query(filters.regex(r'^buy_premium$'))
    async def buy_premium_handler(client, callback_query: CallbackQuery):
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–º–∏—É–º–∞")

        text = """–í—Å–µ –¢–∞—Ä–∏—Ñ—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É:

1. 200 —Ä—É–±–ª–µ–π - 1 –º–µ—Å—è—Ü!

2. 500 —Ä—É–±–ª–µ–π - 3 –º–µ—Å—è—Ü–∞.

3. 800‚ÇΩ - 6 –º–µ—Å—è—Ü–µ–≤.

4. 1200‚ÇΩ - –≥–æ–¥

–†–µ–∫–≤–∏–∑–∏—Ç—ã:

–±–ª—É–ø –Ω–µ —Å–∫–∞–∑–∞–ª

–ó–∞ –¥—Ä—É–≥–∏–º–∏ –±–∞–Ω–∫–∞–º–∏ –∏–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö —Ç–∞–∫–∏—Ö –∫–∞–∫ - –¢–µ–Ω–≥–µ, –ì—Ä–∏–≤–Ω—ã, –†—É–±–ª–∏, –°–æ–º—ã, –õ–∏—Ä—ã, –ò –µ—â–µ –º–Ω–æ–≥–∏–µ –≤–∞–ª—é—Ç—ã. –í –ª—Å - @bluptop

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∫–∏–Ω—å—Ç–µ –≤ –ª—Å —á–µ–∫–∞ –≥–¥–µ –æ—Ç—á—ë—Ç–ª–∏–≤–æ –≤–∏–¥–Ω–æ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–∞. –ï—Å–ª–∏ —á–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å—Å—è, —Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–¥–∞–¥—É—Ç –≤–∞–º –ø—Ä–µ–º–∏—É–º.

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - @bluptop"""

        await callback_query.message.reply(text)
        await callback_query.answer()

   

    @app.on_message(filters.text & filters.regex(r'^‚ùì–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å$'))
    async def my_profile(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        user = message.from_user

        nickname = ' '.join(filter(None, [user.first_name, user.last_name]))
        nickname = nickname.replace('_', '\\_')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        user_id = user.id

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
        async with db.execute('SELECT COUNT(DISTINCT searcher_id) FROM search_logs WHERE target_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            search_count = result[0]
        else:
            search_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—Ç—ã—Ö —Å–∫–∞–º–µ—Ä–æ–≤
        async with db.execute('SELECT scammers_reported FROM user_stats WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            scammers_reported = result[0]
        else:
            scammers_reported = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_owner_user = user_id == OWNER_ID
        is_admin_user = await is_admin(user_id)
        is_trainee_user = await is_trainee(user_id)

        additional_info = ""
        reputation = "–ù–µ—Ç –≤ –±–∞–∑–µ"
        image_url = "https://ibb.co/mXySPM2"

        if is_owner_user:
            reputation = "–í–ª–∞–¥–µ–ª–µ—Ü"
            image_url = "https://ibb.co/mXySPM2"
        elif is_admin_user:
            reputation = "–ê–¥–º–∏–Ω"
            image_url = "https://ibb.co/mXySPM2"
        elif is_trainee_user:
            # –ü–æ–ª—É—á–∞–µ–º admin_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trainees
            async with db.execute('SELECT admin_id FROM trainees WHERE user_id = ?', (user_id,)) as cursor:
                result = await cursor.fetchone()
            if result:
                admin_id = result[0]
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_user = await client.get_users(admin_id)
                admin_name = ' '.join(filter(None, [admin_user.first_name, admin_user.last_name]))
                reputation = f"–°—Ç–∞–∂–µ—Ä {admin_name}"
            else:
                reputation = "–°—Ç–∞–∂–µ—Ä –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            image_url = "https://ibb.co/s9zjWWW"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≥–∞—Ä–∞–Ω—Ç—ã, —Å–∫–∞–º–µ—Ä—ã, –ø—Ä–µ–º–∏—É–º –∏ —Ç.–¥.)
        async with db.execute('SELECT channel_link, photo_link FROM premium_users WHERE user_id = ?', (user_id,)) as cursor:
            premium_data = await cursor.fetchone()

        async with db.execute('SELECT guarantor_id FROM trusted_users WHERE user_id = ?', (user_id,)) as cursor:
            trusted_data = await cursor.fetchone()

        async with db.execute('SELECT 1 FROM guarantors WHERE user_id = ?', (user_id,)) as cursor:
            guarantor_data = await cursor.fetchone()

        async with db.execute('SELECT proof_link FROM scammers WHERE user_id = ?', (user_id,)) as cursor:
            scammer_data = await cursor.fetchone()

        if guarantor_data:
            reputation = "–ì–∞—Ä–∞–Ω—Ç"
        elif trusted_data:
            guarantor_id = trusted_data[0]
            guarantor = await client.get_users(guarantor_id)
            guarantor_nickname = ' '.join(filter(None, [guarantor.first_name, guarantor.last_name]))
            reputation = f"–ü—Ä–æ–≤–µ—Ä–µ–Ω –ì–∞—Ä–∞–Ω—Ç–æ–º {guarantor_nickname}"
        elif scammer_data:
            proof_link = scammer_data[0]
            reputation = "–°–∫–∞–º–µ—Ä"
            additional_info += f"""
üìí **–ü—Ä—É—Ñ—ã:** [–°—Å—ã–ª–∫–∞]({proof_link})
"""

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if premium_data:
            channel_link, photo_link = premium_data
            if channel_link:
                additional_info += f"""
üé≠ **–ö–∞–Ω–∞–ª:** {channel_link}
"""
            if photo_link:
                image_url = photo_link  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ñ–æ—Ç–æ

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ü–†–û–§–ò–õ–¨
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–†–û–§–ò–õ–¨", url=f"tg://user?id={user_id}")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await client.send_photo(
            chat_id=message.chat.id,
            photo=image_url,
            caption=f"""üïµÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:** {nickname}

üÜî _–ê–π–¥–∏:_ {user_id}

üîÅ **–†–µ–ø—É—Ç–∞—Ü–∏—è:** {reputation}

üöÆ **–°–ª–∏—Ç–æ —Å–∫–∞–º–µ—Ä–æ–≤:** {scammers_reported}

üîé **–ò—Å–∫–∞–ª–∏ –≤ –±–∞–∑–µ:** {search_count} —Ä–∞–∑
{additional_info}
""",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )

    @app.on_message(filters.text & filters.regex(r'^üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$') | filters.command("stats"))
    async def bot_stats(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞")

        user = message.from_user
        nickname = ' '.join(filter(None, [user.first_name, user.last_name]))
        nickname = nickname.replace('_', '\\_')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ
        async with db.execute('SELECT COUNT(*) FROM scammers') as cursor:
            scammers_count = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        async with db.execute('SELECT COUNT(DISTINCT user_id) FROM user_stats') as cursor:
            users_count = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤
        async with db.execute('SELECT COUNT(*) FROM admins') as cursor:
            admins_count = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤
        async with db.execute('SELECT COUNT(*) FROM guarantors') as cursor:
            guarantors_count = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with db.execute('SELECT COUNT(*) FROM trusted_users') as cursor:
            trusted_users_count = (await cursor.fetchone())[0]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with db.execute('SELECT COUNT(*) FROM bot_groups') as cursor:
            group_count = (await cursor.fetchone())[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await message.reply(
            f"""{nickname}

üö´ **–°–∫–∞–º–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ:** {scammers_count}
üëÅÔ∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:** {users_count}

‚öñÔ∏è **–ê–¥–º–∏–Ω–æ–≤:** {admins_count}
üí∏ **–ì–∞—Ä–∞–Ω—Ç–æ–≤:** {guarantors_count}
üèÜÔ∏è **–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö:** {trusted_users_count}

üéâ **–ë–æ—Ç —É–∂–µ –≤ {group_count} –≥—Ä—É–ø–ø–∞—Ö**
""",
            parse_mode=enums.ParseMode.MARKDOWN
        )

    @app.on_message(filters.text & filters.regex(r'^üíì–ù–∞—à–∏ –ì–∞—Ä–∞–Ω—Ç—ã$'))
    async def our_guarantors(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤
        async with db.execute('SELECT user_id FROM guarantors') as cursor:
            guarantors = await cursor.fetchall()

        if not guarantors:
            await message.reply("–°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        buttons = []
        for (guarantor_id,) in guarantors:
            try:
                guarantor = await client.get_users(guarantor_id)
                nickname = ' '.join(filter(None, [guarantor.first_name, guarantor.last_name]))
                buttons.append([InlineKeyboardButton(nickname, url=f"tg://user?id={guarantor_id}")])
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞—Ä–∞–Ω—Ç–µ {guarantor_id}: {e}")

        keyboard = InlineKeyboardMarkup(buttons)

        await message.reply("–ù–∞—à–∏ –ì–∞—Ä–∞–Ω—Ç—ã:", reply_markup=keyboard)

    @app.on_message(filters.text & filters.regex(r'^ü§¨–°–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞$'))
    async def report_scammer(client, message: Message):
        if not await is_button_click_allowed(message.from_user.id):
            temp_msg = await message.reply("–ù–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å —Ç–∞–∫ —á–∞—Å—Ç–æ!")
            await asyncio.sleep(3)
            await temp_msg.delete()
            return
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É 'ü§¨–°–ª–∏—Ç—å —Å–∫–∞–º–µ—Ä–∞'")

        text = """üòÆ‚Äçüí® –ï—Å–ª–∏ –≤—ã —Å—Ç–∞–ª–∏ –∂–µ—Ä—Ç–≤–æ–π –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤ - –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É'

üë©‚Äçüíª –í—ã –±—É–¥–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç —Å –Ω–∞—à–∏–º–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º–∏, –æ–Ω–∏ —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –∑–∞–Ω–µ—Å—É—Ç –º–æ—à–µ–Ω–Ω–∏–∫–∞ –≤ –±–∞–∑—É. –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ"""

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É", url="https://t.me/Forgotbase")]
        ])

        await message.reply(text, reply_markup=keyboard)

    @app.on_message(filters.command("trust") & filters.reply)
    async def trust_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /trust –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        if not await is_guarantor(message.from_user.id):
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–∞—Ä–∞–Ω—Ç–∞–º.")
            return

        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.execute('INSERT OR REPLACE INTO trusted_users (user_id, guarantor_id) VALUES (?, ?)', (target_user_id, message.from_user.id))
        await db.commit()

        guarantor_nickname = ' '.join(filter(None, [message.from_user.first_name, message.from_user.last_name]))

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–æ–≤–µ—Ä–µ–Ω –ì–∞—Ä–∞–Ω—Ç–æ–º {guarantor_nickname}'.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        await client.send_message(
            chat_id=OWNER_ID,
            text=f"–ì–∞—Ä–∞–Ω—Ç {guarantor_nickname} ({message.from_user.id}) –≤—ã–¥–∞–ª /trust –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}."
        )

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /—Å—Ç–∞–∂–µ—Ä ------------------

    @app.on_message(filters.command("—Å—Ç–∞–∂–µ—Ä") & filters.reply)
    async def trainee_command(client, message: Message):
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        target_user = message.reply_to_message.from_user
        target_user_id = target_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—Ç–∞–∂–µ—Ä–æ–º
        if await is_trainee(target_user_id):
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–∂–µ—Ä–æ–º.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å—Ç–∞–∂–µ—Ä–∞
        admin_id = message.from_user.id
        await db.execute('INSERT OR IGNORE INTO trainees (user_id, admin_id) VALUES (?, ?)', (target_user_id, admin_id))
        await db.commit()

        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.mention} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç–∞–∂–µ—Ä–æ–º.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞
        await client.send_message(
            chat_id=target_user_id,
            text=f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å—Ç–∞–∂–µ—Ä–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.mention}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /—Å–∫–∞–º –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤."
        )

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /—Å–∫–∞–º ------------------

    @app.on_message(filters.command("—Å–∫–∞–º"))
    async def scam_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /—Å–∫–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        if await is_admin(message.from_user.id):
            # –ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            args = message.text.split(maxsplit=2)
            if len(args) < 3:
                await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Å–∫–∞–º <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º> <—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞>")
                return

            target = args[1]
            proof_link = args[2]

            user, user_id = await get_user_info(client, target)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if user and not isinstance(user, User):
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–∫–∞–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.execute('INSERT OR REPLACE INTO scammers (user_id, proof_link) VALUES (?, ?)',
                             (user_id, proof_link))
            await db.commit()

            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–∫–∞–º–µ—Ä.")

        elif await is_trainee(message.from_user.id):
            # –ö–æ–¥ –¥–ª—è —Å—Ç–∞–∂–µ—Ä–æ–≤
            async with db.execute('SELECT admin_id FROM trainees WHERE user_id = ?', (message.from_user.id,)) as cursor:
                result = await cursor.fetchone()
            if result:
                admin_id = result[0]
                args = message.text.split(maxsplit=2)
                if len(args) < 3:
                    await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Å–∫–∞–º <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º> <—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞>")
                    return
                target = args[1]
                proof_link = args[2]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É pending_scam_requests
                await db.execute('INSERT INTO pending_scam_requests (trainee_id, target, proof_link) VALUES (?, ?, ?)',
                                 (message.from_user.id, target, proof_link))
                await db.commit()
                async with db.execute('SELECT last_insert_rowid()') as cursor:
                    request_id = (await cursor.fetchone())[0]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                trainee_nickname = message.from_user.mention
                await client.send_message(
                    chat_id=admin_id,
                    text=f"–°—Ç–∞–∂–µ—Ä {trainee_nickname} —Ö–æ—á–µ—Ç –∑–∞–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä—É—Ñ: {proof_link}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_scam_{request_id}")],
                        [InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_scam_{request_id}")]
                    ])
                )
                await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª.")
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–¥–æ–±—Ä–∏—Ç—å" –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–∂–µ—Ä–∞
    @app.on_callback_query(filters.regex(r'^approve_scam_(\d+)$'))
    async def approve_scam_callback(client, callback_query: CallbackQuery):
        request_id = int(callback_query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        async with db.execute('SELECT trainee_id, target, proof_link FROM pending_scam_requests WHERE id = ?', (request_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            trainee_id, target, proof_link = result
            try:
                user, user_id = await get_user_info(client, target)

                if user and not isinstance(user, User):
                    await callback_query.message.reply("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–∫–∞–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                    return

                if user_id is None:
                    await callback_query.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤
                await db.execute('INSERT OR REPLACE INTO scammers (user_id, proof_link) VALUES (?, ?)',
                                 (user_id, proof_link))
                await db.commit()

                await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤.")
                await callback_query.message.edit_text(f"–ó–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç–∞–∂–µ—Ä–∞ –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤.")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞
                await client.send_message(
                    chat_id=trainee_id,
                    text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω."
                )

                # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ pending_scam_requests
                await db.execute('DELETE FROM pending_scam_requests WHERE id = ?', (request_id,))
                await db.commit()

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ approve_scam_callback: {e}")
                await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}")
        else:
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–∂–µ—Ä–∞
    @app.on_callback_query(filters.regex(r'^reject_scam_(\d+)$'))
    async def reject_scam_callback(client, callback_query: CallbackQuery):
        request_id = int(callback_query.data.split('_')[-1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        async with db.execute('SELECT trainee_id, target FROM pending_scam_requests WHERE id = ?', (request_id,)) as cursor:
            result = await cursor.fetchone()
        if result:
            trainee_id, target = result
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            await callback_query.message.edit_text(f"–ó–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç–∞–∂–µ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞–∂–µ—Ä–∞
            await client.send_message(
                chat_id=trainee_id,
                text=f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ pending_scam_requests
            await db.execute('DELETE FROM pending_scam_requests WHERE id = ?', (request_id,))
            await db.commit()
        else:
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /admin ------------------

    @app.on_message(filters.command("admin"))
    async def admin_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º>")
            return

        target = args[1]

        try:
            user_id = None
            user = None
            if target.isdigit():
                user_id = int(target)
                try:
                    user = await client.get_users(user_id)
                except PeerIdInvalid:
                    user = None
            else:
                if target.startswith('@'):
                    target = target[1:]
                user = await client.get_users(target)
                user_id = user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if user and not isinstance(user, User):
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
            await db.commit()

            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /admin: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /premium ------------------

    @app.on_message(filters.command("premium"))
    async def premium_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /premium –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /premium <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º>")
            return

        target = args[1]

        try:
            user_id = None
            user = None
            if target.isdigit():
                user_id = int(target)
                try:
                    user = await client.get_users(user_id)
                except PeerIdInvalid:
                    user = None
            else:
                if target.startswith('@'):
                    target = target[1:]
                user = await client.get_users(target)
                user_id = user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if user and not isinstance(user, User):
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
                return

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.execute('INSERT OR IGNORE INTO premium_users (user_id) VALUES (?)', (user_id,))
            await db.commit()

            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /premium: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º: {e}")

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /setchannel ------------------

    @app.on_message(filters.command("setchannel"))
    async def set_channel(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setchannel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        if not await is_premium(message.from_user.id):
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setchannel <—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª>")
            return

        channel_link = args[1].strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.execute('UPDATE premium_users SET channel_link = ? WHERE user_id = ?', (channel_link, message.from_user.id))
        await db.commit()

        await message.reply("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /setphoto ------------------

    @app.on_message(filters.command("setphoto"))
    async def set_photo(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setphoto –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        if not await is_premium(message.from_user.id):
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏
        if message.photo:
            await message.reply("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ. –¢—É—Ç–æ—Ä–∏–∞–ª - https://telegra.ph/tutor-11-22-3")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setphoto <—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ>")
            return

        photo_link = args[1].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://ibb.co/
        if not photo_link.startswith('https://ibb.co/'):
            await message.reply("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://ibb.co/. –¢—É—Ç–æ—Ä–∏–∞–ª - https://telegra.ph/tutor-11-22-3")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.execute('UPDATE premium_users SET photo_link = ? WHERE user_id = ?', (photo_link, message.from_user.id))
        await db.commit()

        await message.reply("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    # ------------------ –ö–æ–º–∞–Ω–¥–∞ /–≥–∞—Ä–∞–Ω—Ç ------------------

    @app.on_message(filters.command("–≥–∞—Ä–∞–Ω—Ç"))
    async def guarantor_command(client, message: Message):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /–≥–∞—Ä–∞–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        if not is_owner(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≥–∞—Ä–∞–Ω—Ç <–∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º>")
            return

        target = args[1]

        try:
            user_id = None
            user = None
            if target.isdigit():
                user_id = int(target)
                try:
                    user = await client.get_users(user_id)
                except PeerIdInvalid:
                    user = None
            else:
                if target.startswith('@'):
                    target = target[1:]
                user = await client.get_users(target)
                user_id = user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if user and not isinstance(user, User):
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –≥–∞—Ä–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            if user_id is None:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await db.execute('INSERT OR IGNORE INTO guarantors (user_id) VALUES (?)', (user_id,))
            await db.commit()

            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞—Ä–∞–Ω—Ç—ã.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /–≥–∞—Ä–∞–Ω—Ç: {e}")
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–∞: {e}")

    # ------------------ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ------------------

    @app.on_message(filters.command("–æ—Ñ—Ñ—Ç–æ–ø") & filters.reply)
    async def offtop_command(client, message: Message):
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        if not await can_restrict_members(message.chat):
            await message.reply("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        target_user = message.reply_to_message.from_user
        await message.chat.restrict_member(
            target_user.id,
            ChatPermissions(),
            until_date=message.date + timedelta(minutes=30)
        )
        await message.reply_to_message.delete()
        await message.reply(f"{target_user.first_name} –≤—ã–¥–∞–Ω –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç\n–ü—Ä–∏—á–∏–Ω–∞: –û—Ñ—Ñ—Ç–æ–ø\n\n–û–±—â–∞–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –æ—Ñ—Ñ—Ç–æ–ø–∞ @It_s_bloop")

    @app.on_message(filters.command("–º—É—Ç") & filters.reply)
    async def mute_command(client, message: Message):
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not message.reply_to_message:
            await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        if not await can_restrict_members(message.chat):
            await message.reply("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        target_user = message.reply_to_message.from_user
        await message.chat.restrict_member(
            target_user.id,
            ChatPermissions(),
            until_date=message.date + timedelta(minutes=30)
        )
        await message.reply_to_message.delete()
        await message.reply(f"{target_user.first_name} –≤—ã–¥–∞–Ω –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç")

    @app.on_message(filters.command("–∞–Ω–º—É—Ç") & filters.reply)
    async def unmute_command(client, message: Message):
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not await can_restrict_members(message.chat):
            await message.reply("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        target_user = message.reply_to_message.from_user
        await message.chat.unban_member(target_user.id)
        await message.reply(f"{target_user.first_name} —Ä–∞–∑–º—É—á–µ–Ω.")

    @app.on_message(filters.command("–±–∞–Ω") & filters.reply)
    async def ban_command(client, message: Message):
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not await can_restrict_members(message.chat):
            await message.reply("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        target_user = message.reply_to_message.from_user
        await message.chat.ban_member(target_user.id)
        await message.reply(f"{target_user.first_name} –∑–∞–±–∞–Ω–µ–Ω.")

    @app.on_message(filters.command("–∞–Ω–±–∞–Ω") & filters.reply)
    async def unban_command(client, message: Message):
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not await can_restrict_members(message.chat):
            await message.reply("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        target_user = message.reply_to_message.from_user
        await message.chat.unban_member(target_user.id)
        await message.reply(f"{target_user.first_name} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

    # ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ------------------

    @app.on_message(filters.new_chat_members)
    async def welcome_new_member(client, message: Message):
        for new_member in message.new_chat_members:
            user_id = new_member.id
            user = new_member

            nickname = ' '.join(filter(None, [user.first_name, user.last_name]))
            nickname = nickname.replace('_', '\\_')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_owner_user = user_id == OWNER_ID
            is_admin_user = await is_admin(user_id)
            is_trainee_user = await is_trainee(user_id)

            reputation = "–ù–µ—Ç –≤ –±–∞–∑–µ"

            if is_owner_user:
                reputation = "–í–ª–∞–¥–µ–ª–µ—Ü"
            elif is_admin_user:
                reputation = "–ê–¥–º–∏–Ω"
            elif is_trainee_user:
                reputation = "–°—Ç–∞–∂–µ—Ä"

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≥–∞—Ä–∞–Ω—Ç—ã, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ, —Å–∫–∞–º–µ—Ä—ã)
            async with db.execute('SELECT guarantor_id FROM trusted_users WHERE user_id = ?', (user_id,)) as cursor:
                trusted_data = await cursor.fetchone()

            async with db.execute('SELECT 1 FROM guarantors WHERE user_id = ?', (user_id,)) as cursor:
                guarantor_data = await cursor.fetchone()

            async with db.execute('SELECT proof_link FROM scammers WHERE user_id = ?', (user_id,)) as cursor:
                scammer_data = await cursor.fetchone()

            if guarantor_data:
                reputation = "–ì–∞—Ä–∞–Ω—Ç"
            elif trusted_data:
                guarantor_id = trusted_data[0]
                guarantor = await client.get_users(guarantor_id)
                guarantor_nickname = ' '.join(filter(None, [guarantor.first_name, guarantor.last_name]))
                reputation = f"–ü—Ä–æ–≤–µ—Ä–µ–Ω –ì–∞—Ä–∞–Ω—Ç–æ–º {guarantor_nickname}"
            elif scammer_data:
                reputation = "–°–∫–∞–º–µ—Ä"

            await message.reply(f"–í –≥—Ä—É–ø–ø—É –∑–∞—à–µ–ª **{reputation}** –ø–æ–¥ –Ω–∏–∫–æ–º {nickname}", parse_mode=enums.ParseMode.MARKDOWN)

            # –ï—Å–ª–∏ –±–æ—Ç —Å–∞–º –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë ID
            if new_member.is_self:
                await db.execute('INSERT OR IGNORE INTO bot_groups (chat_id) VALUES (?)', (message.chat.id,))
                await db.commit()

    # ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ ------------------

    @app.on_chat_member_updated()
    async def bot_added_to_group(client, chat_member_updated: ChatMemberUpdated):
        if chat_member_updated.new_chat_member.user.is_self:
            if chat_member_updated.new_chat_member.status in (enums.ChatMemberStatus.MEMBER, enums.ChatMemberStatus.ADMINISTRATOR):
                # –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
                await db.execute('INSERT OR IGNORE INTO bot_groups (chat_id) VALUES (?)', (chat_member_updated.chat.id,))
                await db.commit()
            elif chat_member_updated.new_chat_member.status == enums.ChatMemberStatus.LEFT:
                # –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã
                await db.execute('DELETE FROM bot_groups WHERE chat_id = ?', (chat_member_updated.chat.id,))
                await db.commit()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await app.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await idle()
    await app.stop()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    asyncio.run(main())
